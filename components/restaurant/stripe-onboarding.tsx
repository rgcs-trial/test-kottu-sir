'use client'

import { useState, useCallback, useEffect } from 'react'
import { useConnectAccount } from '@/hooks/use-stripe'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { 
  CreditCard, 
  ExternalLink, 
  CheckCircle2, 
  AlertCircle, 
  Clock, 
  DollarSign,\n  TrendingUp,\n  Shield,\n  Loader2,\n  RefreshCw,\n  Settings\n} from 'lucide-react'\n\n// Types\ninterface StripeOnboardingProps {\n  restaurantId: string\n  restaurantName: string\n  restaurantEmail: string\n  className?: string\n}\n\ninterface OnboardingStepProps {\n  title: string\n  description: string\n  isCompleted: boolean\n  isActive: boolean\n  isPending?: boolean\n}\n\n/**\n * Individual onboarding step component\n */\nfunction OnboardingStep({ title, description, isCompleted, isActive, isPending }: OnboardingStepProps) {\n  return (\n    <div className=\"flex items-start space-x-3 p-4 rounded-lg border\">\n      <div className={`mt-0.5 flex-shrink-0 ${\n        isCompleted \n          ? 'text-green-600' \n          : isPending \n          ? 'text-yellow-600'\n          : isActive \n          ? 'text-blue-600' \n          : 'text-gray-400'\n      }`}>\n        {isCompleted ? (\n          <CheckCircle2 className=\"h-5 w-5\" />\n        ) : isPending ? (\n          <Clock className=\"h-5 w-5\" />\n        ) : isActive ? (\n          <AlertCircle className=\"h-5 w-5\" />\n        ) : (\n          <div className=\"h-5 w-5 rounded-full border-2 border-current\" />\n        )}\n      </div>\n      <div className=\"flex-1 min-w-0\">\n        <h3 className={`text-sm font-medium ${\n          isCompleted ? 'text-green-900' : isActive ? 'text-gray-900' : 'text-gray-500'\n        }`}>\n          {title}\n        </h3>\n        <p className={`text-sm ${\n          isCompleted ? 'text-green-700' : isActive ? 'text-gray-600' : 'text-gray-400'\n        }`}>\n          {description}\n        </p>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Main Stripe onboarding component\n */\nexport function StripeOnboarding({ \n  restaurantId, \n  restaurantName, \n  restaurantEmail, \n  className \n}: StripeOnboardingProps) {\n  const { account, isLoading, error, refresh, createOnboardingLink } = useConnectAccount(restaurantId)\n  const [isCreatingLink, setIsCreatingLink] = useState(false)\n  const [linkError, setLinkError] = useState<string | null>(null)\n  \n  // Auto-refresh account status every 30 seconds when requirements exist\n  useEffect(() => {\n    if (account && !account.isOnboarded) {\n      const interval = setInterval(() => {\n        refresh()\n      }, 30000) // 30 seconds\n      \n      return () => clearInterval(interval)\n    }\n  }, [account, refresh])\n  \n  const handleStartOnboarding = useCallback(async () => {\n    setIsCreatingLink(true)\n    setLinkError(null)\n    \n    try {\n      const result = await createOnboardingLink({\n        businessName: restaurantName,\n        email: restaurantEmail,\n        returnUrl: `${window.location.origin}/dashboard/restaurant?onboarding=complete`,\n        refreshUrl: `${window.location.origin}/dashboard/restaurant?onboarding=refresh`,\n      })\n      \n      // Redirect to Stripe onboarding\n      window.location.href = result.onboardingUrl\n    } catch (err) {\n      setLinkError(err instanceof Error ? err.message : 'Failed to start onboarding')\n    } finally {\n      setIsCreatingLink(false)\n    }\n  }, [createOnboardingLink, restaurantName, restaurantEmail])\n  \n  const handleDashboardAccess = useCallback(async () => {\n    if (account?.dashboardUrl) {\n      window.open(account.dashboardUrl, '_blank')\n    }\n  }, [account?.dashboardUrl])\n  \n  const getOnboardingProgress = () => {\n    if (!account) return 0\n    \n    const steps = [\n      account.capabilities.cardPayments === 'active',\n      account.capabilities.transfers === 'active',\n      account.requirements.currentlyDue.length === 0,\n      account.requirements.pendingVerification.length === 0,\n    ]\n    \n    const completedSteps = steps.filter(Boolean).length\n    return (completedSteps / steps.length) * 100\n  }\n  \n  const getStatusColor = () => {\n    if (!account) return 'gray'\n    if (account.canAcceptPayments) return 'green'\n    if (account.requirements.pastDue.length > 0) return 'red'\n    if (account.requirements.currentlyDue.length > 0) return 'yellow'\n    return 'blue'\n  }\n  \n  const getStatusText = () => {\n    if (!account) return 'Not Started'\n    if (account.canAcceptPayments) return 'Active'\n    if (account.requirements.pastDue.length > 0) return 'Action Required'\n    if (account.requirements.currentlyDue.length > 0) return 'In Progress'\n    return 'Under Review'\n  }\n  \n  if (isLoading) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n          <span>Loading payment setup...</span>\n        </CardContent>\n      </Card>\n    )\n  }\n  \n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Main Status Card */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <CreditCard className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <div>\n                <CardTitle>Payment Processing Setup</CardTitle>\n                <CardDescription>\n                  Set up Stripe Connect to accept payments from customers\n                </CardDescription>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <Badge variant={getStatusColor() as any} className=\"mb-1\">\n                {getStatusText()}\n              </Badge>\n              <div className=\"text-sm text-muted-foreground\">\n                {account ? `${Math.round(getOnboardingProgress())}% complete` : 'Not started'}\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {error && (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          {linkError && (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{linkError}</AlertDescription>\n            </Alert>\n          )}\n          \n          {/* Progress Bar */}\n          {account && (\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Setup Progress</span>\n                <span>{Math.round(getOnboardingProgress())}%</span>\n              </div>\n              <Progress value={getOnboardingProgress()} className=\"h-2\" />\n            </div>\n          )}\n          \n          {/* No Account - Start Onboarding */}\n          {!account && (\n            <div className=\"text-center py-8\">\n              <div className=\"bg-blue-50 rounded-full p-3 w-16 h-16 mx-auto mb-4\">\n                <CreditCard className=\"h-10 w-10 text-blue-600\" />\n              </div>\n              <h3 className=\"text-lg font-medium mb-2\">Ready to Accept Payments?</h3>\n              <p className=\"text-muted-foreground mb-6 max-w-md mx-auto\">\n                Set up your Stripe Connect account to start accepting payments from customers. \n                The process takes about 5-10 minutes.\n              </p>\n              <Button\n                onClick={handleStartOnboarding}\n                disabled={isCreatingLink}\n                size=\"lg\"\n                className=\"flex items-center space-x-2\"\n              >\n                {isCreatingLink ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    <span>Starting setup...</span>\n                  </>\n                ) : (\n                  <>\n                    <ExternalLink className=\"h-4 w-4\" />\n                    <span>Start Payment Setup</span>\n                  </>\n                )}\n              </Button>\n            </div>\n          )}\n          \n          {/* Account Exists - Show Status */}\n          {account && (\n            <div className=\"space-y-4\">\n              {/* Action Buttons */}\n              <div className=\"flex justify-between items-center\">\n                <Button\n                  variant=\"outline\"\n                  onClick={refresh}\n                  disabled={isLoading}\n                  className=\"flex items-center space-x-1\"\n                >\n                  <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n                  <span>Refresh Status</span>\n                </Button>\n                \n                <div className=\"flex space-x-2\">\n                  {!account.isOnboarded && (\n                    <Button\n                      onClick={handleStartOnboarding}\n                      disabled={isCreatingLink}\n                      className=\"flex items-center space-x-1\"\n                    >\n                      {isCreatingLink ? (\n                        <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      ) : (\n                        <ExternalLink className=\"h-4 w-4\" />\n                      )}\n                      <span>Continue Setup</span>\n                    </Button>\n                  )}\n                  \n                  {account.dashboardUrl && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={handleDashboardAccess}\n                      className=\"flex items-center space-x-1\"\n                    >\n                      <Settings className=\"h-4 w-4\" />\n                      <span>Stripe Dashboard</span>\n                    </Button>\n                  )}\n                </div>\n              </div>\n              \n              {/* Onboarding Steps */}\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-sm text-gray-700\">Setup Progress</h4>\n                \n                <OnboardingStep\n                  title=\"Card Payments Capability\"\n                  description=\"Ability to accept credit and debit card payments\"\n                  isCompleted={account.capabilities.cardPayments === 'active'}\n                  isActive={account.capabilities.cardPayments === 'pending'}\n                  isPending={account.capabilities.cardPayments === 'pending'}\n                />\n                \n                <OnboardingStep\n                  title=\"Transfers Capability\"\n                  description=\"Ability to receive transfers from the platform\"\n                  isCompleted={account.capabilities.transfers === 'active'}\n                  isActive={account.capabilities.transfers === 'pending'}\n                  isPending={account.capabilities.transfers === 'pending'}\n                />\n                \n                <OnboardingStep\n                  title=\"Required Information\"\n                  description=\"All required business and personal information provided\"\n                  isCompleted={account.requirements.currentlyDue.length === 0}\n                  isActive={account.requirements.currentlyDue.length > 0}\n                />\n                \n                <OnboardingStep\n                  title=\"Verification Complete\"\n                  description=\"All submitted information has been verified\"\n                  isCompleted={account.requirements.pendingVerification.length === 0}\n                  isActive={false}\n                  isPending={account.requirements.pendingVerification.length > 0}\n                />\n              </div>\n              \n              {/* Requirements Details */}\n              {(account.requirements.currentlyDue.length > 0 || account.requirements.pastDue.length > 0) && (\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription className=\"space-y-2\">\n                    <div className=\"font-medium\">\n                      {account.requirements.pastDue.length > 0 \n                        ? 'Immediate action required'\n                        : 'Additional information needed'\n                      }\n                    </div>\n                    <div className=\"text-sm\">\n                      Please complete your Stripe onboarding to start accepting payments.\n                    </div>\n                    <Button\n                      onClick={handleStartOnboarding}\n                      disabled={isCreatingLink}\n                      size=\"sm\"\n                      className=\"mt-2\"\n                    >\n                      {isCreatingLink ? 'Loading...' : 'Complete Setup'}\n                    </Button>\n                  </AlertDescription>\n                </Alert>\n              )}\n              \n              {/* Success State */}\n              {account.canAcceptPayments && (\n                <Alert className=\"border-green-200 bg-green-50\">\n                  <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                  <AlertDescription className=\"text-green-800\">\n                    <div className=\"font-medium mb-1\">Payment processing is active!</div>\n                    <div className=\"text-sm\">\n                      Your restaurant can now accept payments from customers. \n                      Platform fee is 3% per transaction.\n                    </div>\n                  </AlertDescription>\n                </Alert>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      \n      {/* Benefits Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"h-5 w-5\" />\n            <span>Payment Processing Benefits</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center p-4\">\n              <div className=\"bg-green-100 rounded-full p-3 w-12 h-12 mx-auto mb-3\">\n                <DollarSign className=\"h-6 w-6 text-green-600\" />\n              </div>\n              <h3 className=\"font-medium mb-1\">Competitive Rates</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                2.9% + 30¢ per transaction with no monthly fees\n              </p>\n            </div>\n            \n            <div className=\"text-center p-4\">\n              <div className=\"bg-blue-100 rounded-full p-3 w-12 h-12 mx-auto mb-3\">\n                <Shield className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <h3 className=\"font-medium mb-1\">Secure & Compliant</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                PCI DSS compliant with advanced fraud protection\n              </p>\n            </div>\n            \n            <div className=\"text-center p-4\">\n              <div className=\"bg-purple-100 rounded-full p-3 w-12 h-12 mx-auto mb-3\">\n                <CreditCard className=\"h-6 w-6 text-purple-600\" />\n              </div>\n              <h3 className=\"font-medium mb-1\">Multiple Payment Methods</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Accept cards, Apple Pay, Google Pay, and more\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default StripeOnboarding