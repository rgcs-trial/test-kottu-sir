'use client'

import { useState, useCallback } from 'react'
import { usePaymentMethods, type SavedPaymentMethod } from '@/hooks/use-stripe'
import { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Separator } from '@/components/ui/separator'\nimport { \n  CreditCard, \n  Plus, \n  Trash2, \n  Check, \n  AlertCircle,\n  Loader2,\n  Shield\n} from 'lucide-react'\n\n// Card brand icons mapping\nconst cardBrandIcons: Record<string, string> = {\n  visa: 'ðŸ’³',\n  mastercard: 'ðŸ’³',\n  amex: 'ðŸ’³',\n  discover: 'ðŸ’³',\n  diners: 'ðŸ’³',\n  jcb: 'ðŸ’³',\n  unionpay: 'ðŸ’³',\n}\n\n// Types\ninterface PaymentMethodsProps {\n  customerId?: string\n  selectedMethodId?: string\n  onMethodSelect?: (methodId: string) => void\n  onAddNewMethod?: () => void\n  allowSelection?: boolean\n  allowDeletion?: boolean\n  className?: string\n}\n\ninterface PaymentMethodCardProps {\n  method: SavedPaymentMethod\n  isSelected: boolean\n  onSelect?: () => void\n  onDelete?: () => void\n  allowSelection: boolean\n  allowDeletion: boolean\n  isDeleting: boolean\n}\n\n/**\n * Individual payment method card component\n */\nfunction PaymentMethodCard({\n  method,\n  isSelected,\n  onSelect,\n  onDelete,\n  allowSelection,\n  allowDeletion,\n  isDeleting,\n}: PaymentMethodCardProps) {\n  const formatExpiryDate = (month: number, year: number) => {\n    return `${month.toString().padStart(2, '0')}/${year.toString().slice(-2)}`\n  }\n  \n  const isExpired = () => {\n    if (!method.card) return false\n    const now = new Date()\n    const expiry = new Date(method.card.exp_year, method.card.exp_month - 1)\n    return expiry < now\n  }\n  \n  const handleClick = () => {\n    if (allowSelection && onSelect && !isDeleting) {\n      onSelect()\n    }\n  }\n  \n  const handleDelete = (e: React.MouseEvent) => {\n    e.stopPropagation()\n    if (allowDeletion && onDelete && !isDeleting) {\n      onDelete()\n    }\n  }\n  \n  return (\n    <Card \n      className={`cursor-pointer transition-all duration-200 hover:shadow-md ${\n        isSelected ? 'ring-2 ring-primary shadow-md' : ''\n      } ${isDeleting ? 'opacity-50' : ''}`}\n      onClick={handleClick}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {/* Selection indicator */}\n            {allowSelection && (\n              <div className={`w-4 h-4 rounded-full border-2 flex items-center justify-center ${\n                isSelected \n                  ? 'border-primary bg-primary' \n                  : 'border-gray-300'\n              }`}>\n                {isSelected && <Check className=\"w-2.5 h-2.5 text-white\" />}\n              </div>\n            )}\n            \n            {/* Card info */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"text-2xl\">\n                {cardBrandIcons[method.card?.brand || 'visa'] || 'ðŸ’³'}\n              </div>\n              <div className=\"flex flex-col\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"font-medium capitalize\">\n                    {method.card?.brand || 'Card'}\n                  </span>\n                  <span className=\"text-sm text-muted-foreground\">\n                    â€¢â€¢â€¢â€¢ {method.card?.last4 || '0000'}\n                  </span>\n                  {isExpired() && (\n                    <Badge variant=\"destructive\" className=\"text-xs\">\n                      Expired\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  Expires {method.card ? formatExpiryDate(method.card.exp_month, method.card.exp_year) : 'N/A'}\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Delete button */}\n          {allowDeletion && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleDelete}\n              disabled={isDeleting}\n              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n            >\n              {isDeleting ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Trash2 className=\"h-4 w-4\" />\n              )}\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n/**\n * Payment methods management component\n */\nexport function PaymentMethods({\n  customerId,\n  selectedMethodId,\n  onMethodSelect,\n  onAddNewMethod,\n  allowSelection = true,\n  allowDeletion = true,\n  className,\n}: PaymentMethodsProps) {\n  const { paymentMethods, isLoading, error, refresh, deletePaymentMethod } = usePaymentMethods(customerId)\n  const [deletingMethodId, setDeletingMethodId] = useState<string | null>(null)\n  \n  const handleDeleteMethod = useCallback(async (methodId: string) => {\n    try {\n      setDeletingMethodId(methodId)\n      await deletePaymentMethod(methodId)\n      \n      // If the deleted method was selected, clear selection\n      if (selectedMethodId === methodId && onMethodSelect) {\n        onMethodSelect('')\n      }\n    } catch (err) {\n      console.error('Failed to delete payment method:', err)\n      // Error is handled by the hook\n    } finally {\n      setDeletingMethodId(null)\n    }\n  }, [deletePaymentMethod, selectedMethodId, onMethodSelect])\n  \n  if (!customerId) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"p-6 text-center\">\n          <CreditCard className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n          <p className=\"text-sm text-muted-foreground\">\n            Sign in to save and manage payment methods\n          </p>\n        </CardContent>\n      </Card>\n    )\n  }\n  \n  if (isLoading) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n          <span className=\"text-sm text-muted-foreground\">Loading payment methods...</span>\n        </CardContent>\n      </Card>\n    )\n  }\n  \n  return (\n    <div className={className}>\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <CreditCard className=\"h-5 w-5\" />\n              <CardTitle>Payment Methods</CardTitle>\n            </div>\n            {onAddNewMethod && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onAddNewMethod}\n                className=\"flex items-center space-x-1\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                <span>Add New</span>\n              </Button>\n            )}\n          </div>\n          <CardDescription className=\"flex items-center space-x-1\">\n            <Shield className=\"h-4 w-4\" />\n            <span>Your payment methods are securely stored and encrypted</span>\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {error && (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          {paymentMethods.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <CreditCard className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n              <h3 className=\"text-sm font-medium text-gray-900 mb-1\">\n                No payment methods saved\n              </h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Add a payment method to make checkout faster and easier\n              </p>\n              {onAddNewMethod && (\n                <Button\n                  variant=\"outline\"\n                  onClick={onAddNewMethod}\n                  className=\"flex items-center space-x-2\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Add Payment Method</span>\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {paymentMethods.map((method) => (\n                <PaymentMethodCard\n                  key={method.id}\n                  method={method}\n                  isSelected={selectedMethodId === method.id}\n                  onSelect={onMethodSelect ? () => onMethodSelect(method.id) : undefined}\n                  onDelete={() => handleDeleteMethod(method.id)}\n                  allowSelection={allowSelection}\n                  allowDeletion={allowDeletion}\n                  isDeleting={deletingMethodId === method.id}\n                />\n              ))}\n              \n              {onAddNewMethod && (\n                <>\n                  <Separator className=\"my-4\" />\n                  <Card className=\"border-dashed border-2 cursor-pointer hover:bg-gray-50 transition-colors\" onClick={onAddNewMethod}>\n                    <CardContent className=\"flex items-center justify-center p-6\">\n                      <div className=\"text-center\">\n                        <Plus className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                        <p className=\"text-sm font-medium text-gray-600\">Add New Payment Method</p>\n                        <p className=\"text-xs text-muted-foreground\">Save time on your next purchase</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\n/**\n * Compact payment method selector for checkout\n */\nexport function PaymentMethodSelector({\n  customerId,\n  selectedMethodId,\n  onMethodSelect,\n  onAddNewMethod,\n  className,\n}: Pick<PaymentMethodsProps, 'customerId' | 'selectedMethodId' | 'onMethodSelect' | 'onAddNewMethod' | 'className'>) {\n  const { paymentMethods, isLoading, error } = usePaymentMethods(customerId)\n  \n  if (!customerId || isLoading || paymentMethods.length === 0) {\n    return null\n  }\n  \n  return (\n    <div className={className}>\n      <h3 className=\"text-sm font-medium mb-3\">Choose a saved payment method</h3>\n      \n      {error && (\n        <Alert className=\"mb-3\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n      \n      <div className=\"grid gap-2 mb-3\">\n        {paymentMethods.map((method) => (\n          <Card \n            key={method.id}\n            className={`cursor-pointer transition-all duration-200 hover:shadow-sm ${\n              selectedMethodId === method.id ? 'ring-2 ring-primary' : ''\n            }`}\n            onClick={() => onMethodSelect?.(method.id)}\n          >\n            <CardContent className=\"p-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-3 h-3 rounded-full border-2 flex items-center justify-center ${\n                  selectedMethodId === method.id \n                    ? 'border-primary bg-primary' \n                    : 'border-gray-300'\n                }`}>\n                  {selectedMethodId === method.id && <Check className=\"w-1.5 h-1.5 text-white\" />}\n                </div>\n                <div className=\"flex items-center space-x-2 text-sm\">\n                  <span className=\"text-lg\">{cardBrandIcons[method.card?.brand || 'visa'] || 'ðŸ’³'}</span>\n                  <span className=\"capitalize\">{method.card?.brand || 'Card'}</span>\n                  <span className=\"text-muted-foreground\">â€¢â€¢â€¢â€¢ {method.card?.last4 || '0000'}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n      \n      {onAddNewMethod && (\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onAddNewMethod}\n          className=\"w-full justify-start\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add new payment method\n        </Button>\n      )}\n    </div>\n  )\n}\n\nexport default PaymentMethods