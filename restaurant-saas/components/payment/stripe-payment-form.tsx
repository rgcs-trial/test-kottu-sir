'use client'

import { useState, useEffect, useCallback } from 'react'
import { Elements } from '@stripe/react-stripe-js'
import { PaymentElement, useStripe, useElements } from '@stripe/react-stripe-js'
import { getStripe } from '@/lib/stripe/client'
import { usePayment, type PaymentData } from '@/hooks/use-payment'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { formatCurrency } from '@/lib/stripe/client'
import { Loader2, CreditCard, Shield, Lock } from 'lucide-react'

// Types
interface PaymentFormProps {\n  paymentData: PaymentData\n  onPaymentSuccess: (result: { paymentIntentId: string; orderId?: string }) => void\n  onPaymentError: (error: string) => void\n  className?: string\n}\n\ninterface StripePaymentFormProps extends PaymentFormProps {\n  clientSecret: string\n  customerId?: string\n  enableSavedCards?: boolean\n}\n\n/**\n * Internal payment form component (used within Elements provider)\n */\nfunction PaymentFormInner({\n  paymentData,\n  onPaymentSuccess,\n  onPaymentError,\n  enableSavedCards = false,\n}: Omit<PaymentFormProps, 'className'>) {\n  const stripe = useStripe()\n  const elements = useElements()\n  const { isProcessing, error, confirmPayment, clearError } = usePayment()\n  \n  const [saveCard, setSaveCard] = useState(false)\n  const [isReady, setIsReady] = useState(false)\n  \n  useEffect(() => {\n    if (stripe && elements) {\n      setIsReady(true)\n    }\n  }, [stripe, elements])\n  \n  useEffect(() => {\n    if (error) {\n      onPaymentError(error)\n    }\n  }, [error, onPaymentError])\n  \n  const handleSubmit = useCallback(async (event: React.FormEvent) => {\n    event.preventDefault()\n    \n    if (!stripe || !elements || isProcessing) {\n      return\n    }\n    \n    clearError()\n    \n    try {\n      const result = await confirmPayment({\n        elements,\n        paymentData: {\n          ...paymentData,\n          savePaymentMethod: saveCard,\n        },\n      })\n      \n      if (result.success) {\n        onPaymentSuccess({\n          paymentIntentId: result.paymentIntentId!,\n          orderId: result.orderId,\n        })\n      } else {\n        onPaymentError(result.error || 'Payment failed')\n      }\n    } catch (err) {\n      onPaymentError(err instanceof Error ? err.message : 'Payment failed')\n    }\n  }, [stripe, elements, isProcessing, clearError, confirmPayment, paymentData, saveCard, onPaymentSuccess, onPaymentError])\n  \n  const calculateTotals = () => {\n    const subtotal = paymentData.amount\n    const platformFee = subtotal * 0.03 // 3% platform fee\n    const total = subtotal\n    \n    return { subtotal, platformFee, total }\n  }\n  \n  const { subtotal, platformFee, total } = calculateTotals()\n  \n  if (!isReady) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n        <span className=\"ml-2 text-sm text-muted-foreground\">Loading payment form...</span>\n      </div>\n    )\n  }\n  \n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* Order Summary */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <CreditCard className=\"h-5 w-5\" />\n            Order Summary\n          </CardTitle>\n          <CardDescription>\n            Review your order details and complete payment\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Items */}\n          {paymentData.items && paymentData.items.length > 0 && (\n            <div className=\"space-y-2\">\n              {paymentData.items.map((item) => (\n                <div key={item.id} className=\"flex justify-between items-center text-sm\">\n                  <span>\n                    {item.quantity}x {item.name}\n                  </span>\n                  <span>{formatCurrency(item.price * item.quantity)}</span>\n                </div>\n              ))}\n              <Separator className=\"my-2\" />\n            </div>\n          )}\n          \n          {/* Totals */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Subtotal</span>\n              <span>{formatCurrency(subtotal)}</span>\n            </div>\n            <div className=\"flex justify-between text-sm text-muted-foreground\">\n              <span>Platform fee (3%)</span>\n              <span>{formatCurrency(platformFee)}</span>\n            </div>\n            <Separator />\n            <div className=\"flex justify-between font-semibold\">\n              <span>Total</span>\n              <span>{formatCurrency(total)}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Payment Element */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Lock className=\"h-5 w-5\" />\n            Payment Details\n          </CardTitle>\n          <CardDescription className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4\" />\n            Your payment information is secure and encrypted\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <PaymentElement\n            options={{\n              layout: 'tabs',\n              paymentMethodOrder: ['card', 'apple_pay', 'google_pay'],\n            }}\n          />\n          \n          {/* Save card option */}\n          {enableSavedCards && (\n            <div className=\"mt-4\">\n              <label className=\"flex items-center space-x-2 text-sm\">\n                <input\n                  type=\"checkbox\"\n                  checked={saveCard}\n                  onChange={(e) => setSaveCard(e.target.checked)}\n                  className=\"rounded border-gray-300\"\n                />\n                <span>Save this payment method for future orders</span>\n              </label>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      \n      {/* Submit Button */}\n      <Button\n        type=\"submit\"\n        disabled={!isReady || isProcessing}\n        className=\"w-full h-12\"\n        size=\"lg\"\n      >\n        {isProcessing ? (\n          <>\n            <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n            Processing payment...\n          </>\n        ) : (\n          <>\n            <Lock className=\"h-4 w-4 mr-2\" />\n            Pay {formatCurrency(total)}\n          </>\n        )}\n      </Button>\n      \n      {/* Security badges */}\n      <div className=\"flex justify-center items-center gap-4 text-xs text-muted-foreground\">\n        <Badge variant=\"outline\" className=\"gap-1\">\n          <Shield className=\"h-3 w-3\" />\n          Secured by Stripe\n        </Badge>\n        <Badge variant=\"outline\">\n          PCI Compliant\n        </Badge>\n        <Badge variant=\"outline\">\n          256-bit SSL\n        </Badge>\n      </div>\n    </form>\n  )\n}\n\n/**\n * Stripe payment form with Elements provider\n */\nexport function StripePaymentForm({\n  clientSecret,\n  paymentData,\n  onPaymentSuccess,\n  onPaymentError,\n  customerId,\n  enableSavedCards = false,\n  className,\n}: StripePaymentFormProps) {\n  const [stripePromise] = useState(() => getStripe())\n  \n  const options = {\n    clientSecret,\n    appearance: {\n      theme: 'stripe' as const,\n      variables: {\n        colorPrimary: '#0570de',\n        colorBackground: '#ffffff',\n        colorText: '#30313d',\n        colorDanger: '#df1b41',\n        fontFamily: 'Inter, system-ui, sans-serif',\n        spacingUnit: '4px',\n        borderRadius: '8px',\n      },\n    },\n    loader: 'auto' as const,\n  }\n  \n  return (\n    <div className={className}>\n      <Elements stripe={stripePromise} options={options}>\n        <PaymentFormInner\n          paymentData={paymentData}\n          onPaymentSuccess={onPaymentSuccess}\n          onPaymentError={onPaymentError}\n          enableSavedCards={enableSavedCards}\n        />\n      </Elements>\n    </div>\n  )\n}\n\n/**\n * Complete payment form component with payment intent creation\n */\nexport function PaymentForm({\n  paymentData,\n  onPaymentSuccess,\n  onPaymentError,\n  className,\n}: PaymentFormProps) {\n  const [clientSecret, setClientSecret] = useState<string | null>(null)\n  const [isCreating, setIsCreating] = useState(false)\n  const [customerId, setCustomerId] = useState<string | null>(null)\n  \n  const { createPaymentIntent, error } = usePayment()\n  \n  useEffect(() => {\n    let isMounted = true\n    \n    const initializePayment = async () => {\n      try {\n        setIsCreating(true)\n        const result = await createPaymentIntent(paymentData)\n        \n        if (isMounted) {\n          setClientSecret(result.clientSecret)\n          setCustomerId(result.customerId)\n        }\n      } catch (err) {\n        if (isMounted) {\n          onPaymentError(err instanceof Error ? err.message : 'Failed to initialize payment')\n        }\n      } finally {\n        if (isMounted) {\n          setIsCreating(false)\n        }\n      }\n    }\n    \n    initializePayment()\n    \n    return () => {\n      isMounted = false\n    }\n  }, [paymentData, createPaymentIntent, onPaymentError])\n  \n  useEffect(() => {\n    if (error) {\n      onPaymentError(error)\n    }\n  }, [error, onPaymentError])\n  \n  if (isCreating) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"flex items-center justify-center p-8\">\n          <Loader2 className=\"h-8 w-8 animate-spin\" />\n          <span className=\"ml-2\">Preparing payment form...</span>\n        </CardContent>\n      </Card>\n    )\n  }\n  \n  if (!clientSecret) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"p-8\">\n          <Alert>\n            <AlertDescription>\n              Failed to initialize payment. Please try again.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    )\n  }\n  \n  return (\n    <StripePaymentForm\n      clientSecret={clientSecret}\n      paymentData={paymentData}\n      onPaymentSuccess={onPaymentSuccess}\n      onPaymentError={onPaymentError}\n      customerId={customerId || undefined}\n      enableSavedCards={!!customerId}\n      className={className}\n    />\n  )\n}\n\nexport default PaymentForm