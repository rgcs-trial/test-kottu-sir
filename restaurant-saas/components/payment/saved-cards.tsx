'use client'

import { useState, useCallback } from 'react'
import { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js'
import { getStripe } from '@/lib/stripe/client'
import { usePaymentMethods } from '@/hooks/use-stripe'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { 
  CreditCard, 
  Plus, 
  Trash2, 
  Edit,
  Save,
  X,
  AlertCircle,
  Loader2,
  CheckCircle2\n} from 'lucide-react'\n\n// Types\ninterface SavedCardsProps {\n  customerId: string\n  className?: string\n}\n\ninterface AddCardFormProps {\n  customerId: string\n  onSuccess: () => void\n  onCancel: () => void\n}\n\ninterface EditCardFormProps {\n  paymentMethodId: string\n  currentNickname?: string\n  onSuccess: () => void\n  onCancel: () => void\n}\n\n/**\n * Add new card form component\n */\nfunction AddCardForm({ customerId, onSuccess, onCancel }: AddCardFormProps) {\n  const stripe = useStripe()\n  const elements = useElements()\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [nickname, setNickname] = useState('')\n  \n  const handleSubmit = useCallback(async (event: React.FormEvent) => {\n    event.preventDefault()\n    \n    if (!stripe || !elements) {\n      return\n    }\n    \n    setIsLoading(true)\n    setError(null)\n    \n    try {\n      const cardElement = elements.getElement(CardElement)\n      if (!cardElement) {\n        throw new Error('Card element not found')\n      }\n      \n      // Create payment method\n      const { error: createError, paymentMethod } = await stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        metadata: {\n          nickname: nickname.trim() || undefined,\n        },\n      })\n      \n      if (createError) {\n        throw new Error(createError.message || 'Failed to create payment method')\n      }\n      \n      if (!paymentMethod) {\n        throw new Error('Payment method not created')\n      }\n      \n      // Save payment method to customer\n      const response = await fetch('/api/stripe/payment-methods', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          customerId,\n          paymentMethodId: paymentMethod.id,\n          nickname: nickname.trim() || undefined,\n        }),\n      })\n      \n      const data = await response.json()\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to save payment method')\n      }\n      \n      onSuccess()\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to add card')\n    } finally {\n      setIsLoading(false)\n    }\n  }, [stripe, elements, customerId, nickname, onSuccess])\n  \n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      {error && (\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"nickname\">Card nickname (optional)</Label>\n        <Input\n          id=\"nickname\"\n          type=\"text\"\n          placeholder=\"e.g., Personal Visa, Work Amex\"\n          value={nickname}\n          onChange={(e) => setNickname(e.target.value)}\n          maxLength={50}\n        />\n        <p className=\"text-xs text-muted-foreground\">\n          Give your card a nickname to easily identify it\n        </p>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <Label>Card details</Label>\n        <div className=\"p-3 border rounded-md\">\n          <CardElement\n            options={{\n              style: {\n                base: {\n                  fontSize: '16px',\n                  color: '#374151',\n                  '::placeholder': {\n                    color: '#9CA3AF',\n                  },\n                },\n                invalid: {\n                  color: '#EF4444',\n                },\n              },\n              hidePostalCode: true,\n            }}\n          />\n        </div>\n      </div>\n      \n      <div className=\"flex justify-end space-x-2 pt-4\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={onCancel}\n          disabled={isLoading}\n        >\n          <X className=\"h-4 w-4 mr-1\" />\n          Cancel\n        </Button>\n        <Button\n          type=\"submit\"\n          disabled={!stripe || isLoading}\n        >\n          {isLoading ? (\n            <>\n              <Loader2 className=\"h-4 w-4 animate-spin mr-1\" />\n              Saving...\n            </>\n          ) : (\n            <>\n              <Save className=\"h-4 w-4 mr-1\" />\n              Save Card\n            </>\n          )}\n        </Button>\n      </div>\n    </form>\n  )\n}\n\n/**\n * Edit card nickname form\n */\nfunction EditCardForm({ paymentMethodId, currentNickname = '', onSuccess, onCancel }: EditCardFormProps) {\n  const [nickname, setNickname] = useState(currentNickname)\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  \n  const handleSubmit = useCallback(async (event: React.FormEvent) => {\n    event.preventDefault()\n    \n    setIsLoading(true)\n    setError(null)\n    \n    try {\n      const response = await fetch('/api/stripe/payment-methods', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          paymentMethodId,\n          nickname: nickname.trim() || undefined,\n        }),\n      })\n      \n      const data = await response.json()\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to update payment method')\n      }\n      \n      onSuccess()\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update card')\n    } finally {\n      setIsLoading(false)\n    }\n  }, [paymentMethodId, nickname, onSuccess])\n  \n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      {error && (\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"edit-nickname\">Card nickname</Label>\n        <Input\n          id=\"edit-nickname\"\n          type=\"text\"\n          placeholder=\"e.g., Personal Visa, Work Amex\"\n          value={nickname}\n          onChange={(e) => setNickname(e.target.value)}\n          maxLength={50}\n        />\n        <p className=\"text-xs text-muted-foreground\">\n          Leave empty to remove nickname\n        </p>\n      </div>\n      \n      <div className=\"flex justify-end space-x-2 pt-4\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={onCancel}\n          disabled={isLoading}\n        >\n          <X className=\"h-4 w-4 mr-1\" />\n          Cancel\n        </Button>\n        <Button\n          type=\"submit\"\n          disabled={isLoading}\n        >\n          {isLoading ? (\n            <>\n              <Loader2 className=\"h-4 w-4 animate-spin mr-1\" />\n              Updating...\n            </>\n          ) : (\n            <>\n              <Save className=\"h-4 w-4 mr-1\" />\n              Update\n            </>\n          )}\n        </Button>\n      </div>\n    </form>\n  )\n}\n\n/**\n * Main saved cards management component\n */\nexport function SavedCards({ customerId, className }: SavedCardsProps) {\n  const { paymentMethods, isLoading, error, refresh, deletePaymentMethod } = usePaymentMethods(customerId)\n  const [showAddForm, setShowAddForm] = useState(false)\n  const [editingMethodId, setEditingMethodId] = useState<string | null>(null)\n  const [deletingMethodId, setDeletingMethodId] = useState<string | null>(null)\n  const [stripePromise] = useState(() => getStripe())\n  \n  const handleAddSuccess = useCallback(() => {\n    setShowAddForm(false)\n    refresh()\n  }, [refresh])\n  \n  const handleEditSuccess = useCallback(() => {\n    setEditingMethodId(null)\n    refresh()\n  }, [refresh])\n  \n  const handleDelete = useCallback(async (methodId: string) => {\n    if (!confirm('Are you sure you want to delete this payment method?')) {\n      return\n    }\n    \n    try {\n      setDeletingMethodId(methodId)\n      await deletePaymentMethod(methodId)\n    } catch (err) {\n      console.error('Failed to delete payment method:', err)\n    } finally {\n      setDeletingMethodId(null)\n    }\n  }, [deletePaymentMethod])\n  \n  const formatExpiryDate = (month: number, year: number) => {\n    return `${month.toString().padStart(2, '0')}/${year.toString().slice(-2)}`\n  }\n  \n  const isCardExpired = (month: number, year: number) => {\n    const now = new Date()\n    const expiry = new Date(year, month - 1)\n    return expiry < now\n  }\n  \n  if (isLoading) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n          <span>Loading saved cards...</span>\n        </CardContent>\n      </Card>\n    )\n  }\n  \n  return (\n    <div className={className}>\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <CreditCard className=\"h-5 w-5\" />\n                <span>Saved Cards</span>\n              </CardTitle>\n              <CardDescription>\n                Manage your saved payment methods for faster checkout\n              </CardDescription>\n            </div>\n            <Dialog open={showAddForm} onOpenChange={setShowAddForm}>\n              <DialogTrigger asChild>\n                <Button className=\"flex items-center space-x-1\">\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Add Card</span>\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Add New Card</DialogTitle>\n                  <DialogDescription>\n                    Add a payment method to your account for faster checkout\n                  </DialogDescription>\n                </DialogHeader>\n                <Elements stripe={stripePromise}>\n                  <AddCardForm\n                    customerId={customerId}\n                    onSuccess={handleAddSuccess}\n                    onCancel={() => setShowAddForm(false)}\n                  />\n                </Elements>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {error && (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          {paymentMethods.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <CreditCard className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                No saved cards\n              </h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Add a card to make future purchases faster and easier\n              </p>\n              <Button\n                onClick={() => setShowAddForm(true)}\n                className=\"flex items-center space-x-2\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                <span>Add Your First Card</span>\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid gap-4\">\n              {paymentMethods.map((method) => (\n                <Card key={method.id} className=\"relative\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-3xl\">\n                          💳\n                        </div>\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"font-medium capitalize\">\n                              {method.card?.brand || 'Card'}\n                            </span>\n                            <span className=\"text-muted-foreground\">\n                              •••• {method.card?.last4 || '0000'}\n                            </span>\n                            {method.card && isCardExpired(method.card.exp_month, method.card.exp_year) && (\n                              <Badge variant=\"destructive\">Expired</Badge>\n                            )}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Expires {method.card ? formatExpiryDate(method.card.exp_month, method.card.exp_year) : 'N/A'}\n                          </div>\n                          {method.metadata?.nickname && (\n                            <div className=\"text-sm text-blue-600\">\n                              {method.metadata.nickname}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <Dialog \n                          open={editingMethodId === method.id} \n                          onOpenChange={(open) => setEditingMethodId(open ? method.id : null)}\n                        >\n                          <DialogTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"sm:max-w-md\">\n                            <DialogHeader>\n                              <DialogTitle>Edit Card</DialogTitle>\n                              <DialogDescription>\n                                Update the nickname for this payment method\n                              </DialogDescription>\n                            </DialogHeader>\n                            <EditCardForm\n                              paymentMethodId={method.id}\n                              currentNickname={method.metadata?.nickname}\n                              onSuccess={handleEditSuccess}\n                              onCancel={() => setEditingMethodId(null)}\n                            />\n                          </DialogContent>\n                        </Dialog>\n                        \n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(method.id)}\n                          disabled={deletingMethodId === method.id}\n                          className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        >\n                          {deletingMethodId === method.id ? (\n                            <Loader2 className=\"h-4 w-4 animate-spin\" />\n                          ) : (\n                            <Trash2 className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default SavedCards